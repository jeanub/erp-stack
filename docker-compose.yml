services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    profiles: ["dev","prod"]

  # Desarrollo: solo apps/ como volumen para hot-reload
  backend:
    build:
      context: .
      dockerfile: backend.Dockerfile
    env_file:
      - .env.dev
    depends_on:
      - db
    working_dir: /app
    volumes:
      - ./backend/apps:/app/apps      # solo código de apps
    ports:
      - "8000:8000"
    profiles: ["dev"]
    command: python manage.py runserver 0.0.0.0:8000

  # Desarrollo: Vite en caliente
  frontend:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ./frontend:/app
    command: sh -c "npm ci || npm install && npm run dev -- --host 0.0.0.0 --port 5173"
    ports:
      - "5173:5173"
    profiles: ["dev"]

  # Producción: Gunicorn sin volúmenes
  backend_prod:
    build:
      context: .
      dockerfile: backend.Dockerfile
    env_file:
      - .env.prod
    depends_on:
      - db
    working_dir: /app
    profiles: ["prod"]
    command: sh -c "python manage.py migrate && python manage.py collectstatic --noinput && gunicorn config.wsgi:application --bind 0.0.0.0:8000"

  # Producción: Nginx sirve SPA y proxy /api/
  frontend_prod:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    depends_on:
      - backend_prod
    ports:
      - "80:80"
    profiles: ["prod"]

volumes:
  db_data:
